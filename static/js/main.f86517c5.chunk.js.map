{"version":3,"sources":["component/PhoneForm.js","component/PhoneInfo.js","component/PhoneInfoList.js","App.js","serviceWorker.js","index.js"],"names":["PhoneForm","state","name","phone","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onCreate","onSubmit","this","placeholder","onChange","type","Component","PhoneInfo","editing","handleRemove","info","onRemove","id","handleToggleEdit","prevProps","prevState","onUpdate","nextProps","nextState","console","log","style","border","padding","margin","onClick","defaultProps","PhoneInfoList","data","list","map","key","warn","App","information","keyword","handleCreate","concat","filter","handleUpdate","filteredList","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f86517c5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass PhoneForm extends Component {\r\n    state = {\r\n        name: '',\r\n        phone: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onCreate(this.state);\r\n        this.setState({\r\n            name:'',\r\n            phone:''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input \r\n                    placeholder=\"이름\"\r\n                    value={this.state.name}\r\n                    onChange={this.handleChange}\r\n                    name=\"name\"\r\n                />\r\n                <input \r\n                    placeholder=\"전화번호\"\r\n                    value={this.state.phone}\r\n                    onChange={this.handleChange}\r\n                    name=\"phone\"\r\n                />                \r\n                <button type=\"submit\">등록</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PhoneForm;","import React, {Component} from 'react';\r\n\r\nclass PhoneInfo extends Component {\r\n    static defaultProps = {\r\n        info: {\r\n            name: '이름',\r\n            phone: '010-0000-0000',\r\n            id: 0\r\n        }\r\n    }\r\n\r\n    state = {\r\n        editing: false,\r\n        name: '',\r\n        phone: '',\r\n    }\r\n    handleRemove = () => {\r\n        const {info, onRemove} = this.props;\r\n        onRemove(info.id);\r\n    }\r\n    handleToggleEdit = () => {\r\n        const {editing} = this.state;\r\n        this.setState({editing: !editing});\r\n    }\r\n    handleChange = (e) => {\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const {info, onUpdate} = this.props;\r\n        if(!prevState.editing && this.state.editing) {\r\n            this.setState({\r\n                name: info.name,\r\n                phone: info.phone\r\n            })\r\n        }\r\n\r\n        if(prevState.editing && !this.state.editing) {\r\n            onUpdate(info.id, {\r\n                name: this.state.name,\r\n                phone: this.state.phone\r\n            })\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(!this.state.editing\r\n            && !nextState.editing\r\n            && nextProps.info === this.props.info) {\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        console.log('render PhoneInfo ' + this.props.info.id)\r\n        const style = {\r\n            border: '1px solid black',\r\n            padding: '8px',\r\n            margin: '8px'\r\n        };\r\n\r\n        const {editing} = this.state;\r\n\r\n        if(editing) {\r\n            return (\r\n                <div style={style}>\r\n                    <div>\r\n                        <input \r\n                            placeholder=\"이름\"\r\n                            value={this.state.name}\r\n                            onChange={this.handleChange}\r\n                            name=\"name\"\r\n                        /> \r\n                    </div>\r\n                    <div>\r\n                        <input \r\n                            placeholder=\"전화번호\"\r\n                            value={this.state.phone}\r\n                            onChange={this.handleChange}\r\n                            name=\"phone\"\r\n                        />                                   \r\n                    </div>\r\n                    <button onClick={this.handleToggleEdit}>mod</button>\r\n                    <button onClick={this.handleRemove}>del</button>                    \r\n                </div>\r\n            )\r\n        }\r\n\r\n        const {\r\n            name, phone\r\n        } = this.props.info;\r\n\r\n        return (\r\n            <div style={style}>\r\n                <div><b>{name}</b></div>\r\n                <div>{phone}</div>\r\n                <button onClick={this.handleToggleEdit}>mod</button>\r\n                <button onClick={this.handleRemove}>del</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PhoneInfo;","import React, {Component} from 'react';\r\nimport PhoneInfo from './PhoneInfo';\r\n\r\nclass PhoneInfoList extends Component {\r\n    static defaultProps = {\r\n        data: [],\r\n        onRemove: () => console.warn('onRemove not defined'),\r\n        onUpdate: () => console.warn('onUpdate not defined'),\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return nextProps.data !== this.props.data;\r\n    }\r\n\r\n    render() {\r\n        console.log('render PhoneInfoList')\r\n        const {data, onRemove, onUpdate} = this.props;\r\n        const list = data.map(\r\n            info => (\r\n                <PhoneInfo \r\n                    key={info.id}\r\n                    info={info}\r\n                    onRemove={onRemove}\r\n                    onUpdate={onUpdate}\r\n            />)\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                {list}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PhoneInfoList;","import React, {Component} from 'react';\nimport PhoneForm from './component/PhoneForm';\nimport PhoneInfoList from './component/PhoneInfoList';\n\nclass App extends Component {\n  id =2\n  state = {\n    information: [\n      {\n        id:0,\n        name: '김민준',\n        phone: '010-0000-0000'\n      },\n      {\n        id:1,\n        name: '홍길동',\n        phone: '010-0000-0001'\n      }      \n    ],\n    keyword: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      keyword: e.target.value,\n    })\n  }\n  handleCreate = (data) => {\n    const {information} = this.state;\n    this.setState({\n      information: information.concat({id:this.id++, ...data})\n    })\n    console.log(data);\n  }\n  handleRemove = (id) => {\n    const {information} = this.state;\n    this.setState({\n      information: information.filter(info => info.id !== id)\n    })\n  }\n  handleUpdate = (id, data) => {\n    const {information} = this.state;\n    this.setState({\n      information: information.map(\n        info => id === info.id\n          ? {...info, ...data}\n          : info\n      )\n    })\n  }\n  render() {\n    const {information, keyword} = this.state;\n    const filteredList = information.filter(\n      info => info.name.indexOf(keyword) !== -1\n    );\n    return (\n      <div>\n        <PhoneForm\n          onCreate={this.handleCreate}\n        />\n        <p>\n          <input\n            placeholder=\"검색할 이름을 입력하세요.\"\n            onChange={this.handleChange}\n            value={keyword}\n          />\n        </p>\n        <PhoneInfoList \n          data={filteredList}\n          onRemove={this.handleRemove}\n          onUpdate={this.handleUpdate}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}